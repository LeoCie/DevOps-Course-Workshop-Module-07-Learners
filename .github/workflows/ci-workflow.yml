name: Continuous Integration
on: [push]

jobs:
  build:
    name: Build and test dotnet
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x
      - run: dotnet build
      - run: dotnet test
  build-npm:
    name: Build and test npm
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./DotnetTemplate.Web
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Run npm install
        run: npm install
      - name: Run npm linter
        run: npm run lint
      - name: Run npm build
        run: npm run build
      - name: Run npm tests
        run: npm t

  build-and-release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [build,build-npm]
    steps:
      # Check-out your repository.
      - name: Checkout
        uses: actions/checkout@v2
      ### ⬇ IMPORTANT PART ⬇ ###
      - name: Build, Push and Release a Docker container to Heroku. # Your custom step name
        uses: gonuit/heroku-docker-deploy@v1.3.3 # GitHub action name (leave it as it is).
        with:
          # Below you must provide variables for your Heroku app.

          # The email address associated with your Heroku account.
          # If you don't want to use repository secrets (which is recommended) you can do:
          # email: my.email@example.com
          email: ${{ secrets.HEROKU_EMAIL }}

          # Heroku API key associated with provided user's email.
          # Api Key is available under your Heroku account settings.
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}

          # Name of the heroku application to which the build is to be sent.
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}

          # (Optional, default: "./")
          # Dockerfile directory.
          # For example, if you have a Dockerfile in the root of your project, leave it as follows:
          dockerfile_directory: ./

          # (Optional, default: "Dockerfile")
          # Dockerfile name.
          dockerfile_name: Dockerfile.app

          # (Optional, default: "web")
          # Select the process type for which you want the docker container to be uploaded.
          # By default, this argument is set to "web".
          # For more information look at https://devcenter.heroku.com/articles/process-model
          process_type: web

  notify-slack-succeed:
    name: Notify slack of result
    runs-on: ubuntu-latest
    needs: [build,build-npm,build-and-release]
    steps:
      - uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: '#devops-apprenticeship'
          SLACK_USERNAME: github actions
          SLACK_COLOR: '#23b828' #green
          SLACK_TITLE: ':large_green_circle: Build succeeded for ${{ github.ref }}'
          SLACK_ICON_EMOJI: ':eyes:'
  notify-slack-failure:
    name: Notify slack of result
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    needs: [build,build-npm,build-and-release]
    steps:
      - uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: '#devops-apprenticeship'
          SLACK_USERNAME: github actions
          SLACK_COLOR: '#d12121' #red
          SLACK_TITLE: ':red_circle: Build failed for ${{ github.ref }}'
          SLACK_ICON_EMOJI: ':eyes:'
